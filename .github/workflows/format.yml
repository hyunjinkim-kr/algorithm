name: Format and Build Check

on:
  pull_request:
    branches:
      - main  # PR이 요청될 대상 브랜치

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository 체크아웃
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 모든 히스토리를 가져옵니다.

      # 2. Main 브랜치를 fetch
      - name: Fetch main branch
        run: |
          git fetch origin main

      # 3. Java 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      # 4. Google Java Format 다운로드
      - name: Download Google Java Format
        run: |
          wget https://github.com/google/google-java-format/releases/download/v1.23.0/google-java-format-1.23.0-all-deps.jar -O google-java-format.jar

      # 5. 포맷 검사 실행 (Java 파일)
      - name: Run Google Java Format Check
        run: |
          # 현재 브랜치에서 변경된 Java 파일을 가져옵니다.
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '.java$' || true)
          echo "Changed files: $CHANGED_FILES"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Java files changed in this PR."
            exit 0  # 변경 사항이 없으면 정상 종료
          else
            FORMAT_ISSUE_FOUND=false
            for file in $CHANGED_FILES; do
              # 포맷을 적용하고 변경된 부분을 git diff로 확인
              java -jar google-java-format.jar --replace "$file"
              DIFF_OUTPUT=$(git diff "$file")
              if [ -n "$DIFF_OUTPUT" ]; then
                echo "Formatting issues found in $file:"
                echo "$DIFF_OUTPUT"  # 문제된 부분만 출력
                FORMAT_ISSUE_FOUND=true
              fi
            done
            if [ "$FORMAT_ISSUE_FOUND" = true ]; then
              echo "Formatting issues detected. Please fix them before pushing."
              exit 1  # 포맷 문제가 있으면 실패 처리
            else
              echo "All Java files are formatted correctly."
              exit 0  # 포맷 문제가 없으면 정상 종료
            fi
          fi

      # 6. 변경된 파일만 컴파일
      - name: Compile changed Java files
        run: |
          if [ -n "$CHANGED_FILES" ]; then
            echo "Compiling changed files..."
            javac $CHANGED_FILES  # 변경된 파일들만 컴파일
          else
            echo "No Java files to compile."
          fi

  # 추가된 Python 포맷 검사 및 테스트 작업
  python-format:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository 체크아웃
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 모든 히스토리를 가져옵니다.

      # 2. Python 3.9.18 설치
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.18'  # Python 3.9 버전으로 변경

      # 3. Python 의존성 설치 (black 포함)
      - name: Install dependencies
        run: |
          pip install black

      # 4. 포맷 검사 실행 (Python 파일)
      - name: Run Black Format Check
        run: |
          CHANGED_PY_FILES=$(git diff --name-only origin/main...HEAD | grep '.py$' || true)
          echo "Changed Python files: $CHANGED_PY_FILES"
          if [ -z "$CHANGED_PY_FILES" ]; then
            echo "No Python files changed in this PR."
            exit 0  # 변경 사항이 없으면 정상 종료
          else
            FORMAT_ISSUE_FOUND=false
            for file in $CHANGED_PY_FILES; do
              black --check "$file"  # black 포맷 검사 실행
              if [ $? -ne 0 ]; then
                echo "Formatting issues found in $file"
                FORMAT_ISSUE_FOUND=true
              fi
            done
            if [ "$FORMAT_ISSUE_FOUND" = true ]; then
              echo "Formatting issues detected in Python files. Please fix them before pushing."
              exit 1  # 포맷 문제가 있으면 실패 처리
            else
              echo "All Python files are formatted correctly."
              exit 0  # 포맷 문제가 없으면 정상 종료
            fi
          fi
